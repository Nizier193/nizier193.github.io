// Graph Builder - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞ –≥—Ä–∞—Ñ–∞ –∏–∑ –º–æ–¥—É–ª–µ–π
// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node build-graph.js

const fs = require('fs');
const path = require('path');

class GraphBuilder {
    constructor() {
        this.config = {};
        this.allNodes = [];
        this.allLinks = [];
        this.colorSchemes = {};
        this.defaultSizes = {};
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    loadConfig() {
        try {
            const configPath = './graph-config.json';
            this.config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
            this.colorSchemes = this.config.graph_settings.color_schemes;
            this.defaultSizes = this.config.graph_settings.default_sizes;
            console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
            process.exit(1);
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è
    loadModule(modulePath) {
        try {
            const fullPath = path.resolve(modulePath);
            const moduleData = JSON.parse(fs.readFileSync(fullPath, 'utf8'));
            console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: ${modulePath}`);
            return moduleData;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è ${modulePath}:`, error.message);
            return null;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∑–ª–æ–≤ –∏–∑ –º–æ–¥—É–ª—è
    processNodes(moduleData, categoryName = null) {
        if (moduleData.nodes) {
            // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —É–∑–µ–ª
            moduleData.nodes.forEach(node => {
                this.processNode(node, categoryName);
            });
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —É–∑–ª–∞
    processNode(node, categoryName, parentId = null) {
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const processedNode = {
            id: node.id,
            name: node.name,
            size: node.size || this.getDefaultSize(node.type || 'item'),
            color: node.color || this.getColor(categoryName, node.type),
            text: node.text || `# ${node.name}\n\n–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.`,
            ...node
        };

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ parent –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if (parentId) {
            processedNode.parent = parentId;
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö –ø–æ–ª–µ–π
        delete processedNode.children;
        delete processedNode.type;

        this.allNodes.push(processedNode);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤
        if (node.children) {
            node.children.forEach(child => {
                this.processNode(child, categoryName, node.id);
            });
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    getDefaultSize(type) {
        return this.defaultSizes[type] || this.defaultSizes.item;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    getColor(categoryName, type) {
        if (!categoryName || !this.colorSchemes[categoryName]) {
            return '#95a5a6'; // –¶–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }

        const colors = this.colorSchemes[categoryName];
        const typeIndex = {
            'category': 0,
            'subcategory': 1,
            'item': 2,
            'detail': 3
        };

        return colors[typeIndex[type] || 2];
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤—è–∑–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ parent-child
    generateLinks() {
        this.allNodes.forEach(node => {
            if (node.parent) {
                this.allLinks.push({
                    source: node.parent,
                    target: node.id
                });
            }
        });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–≤—è–∑–µ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if (this.config.config.link_rules.custom_links) {
            this.allLinks.push(...this.config.config.link_rules.custom_links);
        }
    }

    // –°–±–æ—Ä–∫–∞ –≤—Å–µ–≥–æ –≥—Ä–∞—Ñ–∞
    build() {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –≥—Ä–∞—Ñ–∞...\n');

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        this.loadConfig();

        // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
        this.config.config.modules.forEach(modulePath => {
            const moduleData = this.loadModule(modulePath);
            if (moduleData) {
                // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞
                const categoryName = path.basename(modulePath, '.json');
                this.processNodes(moduleData, categoryName);
            }
        });

        // –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤—è–∑–µ–π
        if (this.config.config.auto_generate_links) {
            this.generateLinks();
            console.log('üîó –°–≤—è–∑–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        const result = {
            nodes: this.allNodes,
            links: this.allLinks
        };

        console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±–æ—Ä–∫–∏:`);
        console.log(`   –£–∑–ª–æ–≤: ${this.allNodes.length}`);
        console.log(`   –°–≤—è–∑–µ–π: ${this.allLinks.length}`);

        return result;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    save(outputPath = './data.json') {
        const result = this.build();
        
        try {
            // –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ JSON
            const jsonString = JSON.stringify(result, null, 2);
            fs.writeFileSync(outputPath, jsonString);
            
            console.log(`\n‚úÖ –ì—Ä–∞—Ñ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω: ${outputPath}`);
            console.log(`üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${Math.round(fs.statSync(outputPath).size / 1024)} KB`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error.message);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –≥—Ä–∞—Ñ–∞
    validate() {
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –≥—Ä–∞—Ñ–∞...');
        
        const nodeIds = new Set(this.allNodes.map(n => n.id));
        const issues = [];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π
        this.allLinks.forEach(link => {
            if (!nodeIds.has(link.source)) {
                issues.push(`–°–≤—è–∑—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π source: ${link.source}`);
            }
            if (!nodeIds.has(link.target)) {
                issues.push(`–°–≤—è–∑—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π target: ${link.target}`);
            }
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ID
        const duplicates = this.allNodes
            .map(n => n.id)
            .filter((id, index, arr) => arr.indexOf(id) !== index);

        if (duplicates.length > 0) {
            issues.push(`–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ID: ${duplicates.join(', ')}`);
        }

        if (issues.length === 0) {
            console.log('‚úÖ –ì—Ä–∞—Ñ –≤–∞–ª–∏–¥–µ–Ω!');
        } else {
            console.log('‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:');
            issues.forEach(issue => console.log(`   - ${issue}`));
        }

        return issues.length === 0;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É–∑–ª–∞
function addNode(categoryPath, nodeData) {
    try {
        const module = JSON.parse(fs.readFileSync(categoryPath, 'utf8'));
        
        // –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–∑–ª–∞ –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ –º–æ–¥—É–ª—è
        // ... (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
        
        fs.writeFileSync(categoryPath, JSON.stringify(module, null, 2));
        console.log(`‚úÖ –£–∑–µ–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ ${categoryPath}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–∑–ª–∞:', error.message);
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if (require.main === module) {
    const builder = new GraphBuilder();
    
    // –°–±–æ—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    builder.save();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    builder.validate();
    
    console.log('\nüéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π data.json');
    console.log('\nüìñ –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É–∑–ª–æ–≤:');
    console.log('   1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –≤ nodes/');
    console.log('   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node build-graph.js');
    console.log('   3. –ù–æ–≤—ã–π –≥—Ä–∞—Ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–µ—Ä–µ—Ç—Å—è!');
}

module.exports = { GraphBuilder, addNode }; 